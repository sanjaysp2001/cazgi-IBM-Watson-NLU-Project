{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","map","mapentry","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","data","output","style","color","fontSize","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wPA0BeA,G,kLArBT,OACE,8BACE,uBAAOC,UAAU,uBAAjB,SACE,gCAEEC,OAAOC,QAAQC,KAAKC,MAAMC,UAAUC,KAAI,SAASC,GAC3C,OACI,+BACA,6BAAKA,EAAS,KACd,6BAAKA,EAAS,qB,GAXXC,IAAMC,Y,gBC8FlBC,E,4MA1FbC,MAAQ,CAACC,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzCC,KAAM,OACRC,gBAAgB,GAChBC,WAAU,G,EAGlBC,eAAiB,WACfC,SAASC,eAAe,aAAaC,MAAQ,GACtB,QAApB,EAAKX,MAAMK,MACZ,EAAKO,SAAS,CAACX,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,OACNC,gBAAgB,GAChBC,WAAU,K,EAKdM,cAAgB,WACdJ,SAASC,eAAe,aAAaC,MAAQ,GACtB,SAApB,EAAKX,MAAMK,MACZ,EAAKO,SAAS,CAACX,UAAU,0BAAUC,KAAK,IAAIC,KAAK,KAAKC,GAAG,cACzDC,KAAM,MACNC,gBAAgB,GAChBC,WAAU,K,EAKdO,yBAA2B,WACzB,EAAKF,SAAS,CAACL,WAAU,IACzB,IACIQ,EAAM,IAGRA,EADqB,QAApB,EAAKf,MAAMK,KACNU,EAAI,sBAAsBN,SAASC,eAAe,aAAaC,MAE/DI,EAAI,wBAAwBN,SAASC,eAAe,aAAaC,MAEnEK,IAAMC,IAAIF,GACZG,MAAK,SAACC,GAIR,EAAKP,SAAS,CAACN,gBAAgBa,EAASC,OACxC,IAAIC,EAASF,EAASC,KAEpBC,EADmB,aAAlBF,EAASC,KACD,qBAAKE,MAAO,CAACC,MAAM,QAAQC,SAAS,IAApC,SAA0CL,EAASC,OACjC,aAAlBD,EAASC,KACT,qBAAKE,MAAO,CAACC,MAAM,MAAMC,SAAS,IAAlC,SAAwCL,EAASC,OAEjD,qBAAKE,MAAO,CAACC,MAAM,SAASC,SAAS,IAArC,SAA2CL,EAASC,OAE/D,EAAKR,SAAS,CAACN,gBAAgBe,Q,EAInCI,uBAAyB,WACvB,EAAKb,SAAS,CAACL,WAAU,IACzB,IACIQ,EAAM,IAERA,EADqB,QAApB,EAAKf,MAAMK,KACNU,EAAI,oBAAoBN,SAASC,eAAe,aAAaC,MAE7DI,EAAI,uBAAuBN,SAASC,eAAe,aAAaC,MAElEK,IAAMC,IAAIF,GAEZG,MAAK,SAACC,GACR,EAAKP,SAAS,CAACN,gBAAgB,cAAC,EAAD,CAAcZ,SAAUyB,EAASC,a,uDAMlE,OACE,sBAAK/B,UAAU,MAAf,UACA,wBAAQA,UAAU,eAAeqC,QAASlC,KAAKgB,eAA/C,kBACE,wBAAQnB,UAAU,eAAgBqC,QAASlC,KAAKqB,cAAhD,iBACA,uBAAK,uBACJrB,KAAKQ,MAAMC,UACZ,uBACA,wBAAQZ,UAAU,cAAcqC,QAASlC,KAAKsB,yBAA9C,+BACA,wBAAQzB,UAAU,cAAcqC,QAASlC,KAAKiC,uBAA9C,6BACA,uBACKjC,KAAKQ,MAAMM,uB,GArFNT,IAAMC,WCMT6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAASC,eAAe,SAM1BiB,K","file":"static/js/main.c4e9c25f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bootstrap.min.css';\r\n\r\nclass EmotionTable extends React.Component {\r\n    render() {\r\n      return (  \r\n        <div>\r\n          <table className=\"table table-bordered\">\r\n            <tbody>\r\n            {\r\n              Object.entries(this.props.emotions).map(function(mapentry) {\r\n                    return (\r\n                        <tr>\r\n                        <td>{mapentry[0]}</td>\r\n                        <td>{mapentry[1]}</td>\r\n                        </tr>\r\n                    )\r\n              })\r\n            }\r\n            </tbody>\r\n          </table>\r\n          </div>\r\n          );\r\n        }\r\n    \r\n}\r\nexport default EmotionTable;\r\n","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass App extends React.Component {\r\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n            mode: \"text\",\r\n          sentimentOutput:[],\r\n          sentiment:true\r\n        }\r\n  \r\n  renderTextArea = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"url\") {\r\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"text\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    } \r\n  }\r\n\r\n  renderTextBox = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"text\") {\r\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"url\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    }\r\n  }\r\n\r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({sentiment:true});\r\n    let ret = \"\";\r\n    let url = \".\";\r\n\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n    ret.then((response)=>{\r\n\r\n      //Include code here to check the sentiment and fomrat the data accordingly\r\n\r\n      this.setState({sentimentOutput:response.data});\r\n      let output = response.data;\r\n      if(response.data === \"positive\") {\r\n        output = <div style={{color:\"green\",fontSize:20}}>{response.data}</div>\r\n      } else if (response.data === \"negative\"){\r\n        output = <div style={{color:\"red\",fontSize:20}}>{response.data}</div>\r\n      } else {\r\n        output = <div style={{color:\"orange\",fontSize:20}}>{response.data}</div>\r\n      }\r\n      this.setState({sentimentOutput:output});\r\n    });\r\n  }\r\n\r\n  sendForEmotionAnalysis = () => {\r\n    this.setState({sentiment:false});\r\n    let ret = \"\";\r\n    let url = \".\";\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n\r\n    ret.then((response)=>{\r\n      this.setState({sentimentOutput:<EmotionTable emotions={response.data}/>});\r\n  });\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (  \r\n      <div className=\"App\">\r\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\r\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\r\n        <br/><br/>\r\n        {this.state.innercomp}\r\n        <br/>\r\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\r\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\r\n        <br/>\r\n            {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}